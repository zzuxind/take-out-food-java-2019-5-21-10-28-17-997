import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }
    
    public double noDiscount(Map<String, Integer> items) {
        double result=0.0;
        if(items!=null) {
            for(Map.Entry<String, Integer> entry : items.entrySet()) {
                for (int i = 0; i < itemRepository.findAll().size(); i++) {
                    if(entry.getKey().equals(itemRepository.findAll().get(i).getId())) {
                        result += itemRepository.findAll().get(i).getPrice()*entry.getValue();
                        break;
                    }
                }
            }
        }
        return result;
    }
    
    public double HARF_DISCOUNT_ON_SPECIFIED_ITEMS(Map<String, Integer> items) {
        double result=0.0;
        if(items!=null) {
            for(Map.Entry<String, Integer> entry : items.entrySet()) {
                for (int i = 0; i < itemRepository.findAll().size(); i++) {
                    if(entry.getKey().equals(itemRepository.findAll().get(i).getId())) {
                        result += itemRepository.findAll().get(i).getPrice()/2*entry.getValue();
                        break;
                    }
                }
            }
        }
        return result;
    }
       
    public static String rvZeroAndDot(String s){  
        if (s.isEmpty()) {
            return null;
        }
        if(s.indexOf(".") > 0){  
            s = s.replaceAll("0+?$", "");//去掉多余的0  
            s = s.replaceAll("[.]$", "");//如最后一位是.则去掉  
        }  
        return s;  
  }  
    
    
    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        StringBuilder detailedInfoString = new StringBuilder("============= 订餐明细 =============\n");
        StringBuilder discountInfoString = new StringBuilder("-----------------------------------\n");
        StringBuilder totalInfoString = new StringBuilder("-----------------------------------\n");
        Map<String, Integer> allItems = new HashMap<String, Integer>();//获取所有订单内容
        Map<String, Integer> commonItems = new HashMap<String, Integer>();
        Map<String, Integer> discountItems = new HashMap<String, Integer>();
        List<String> disList = new ArrayList<String>();
        double totalPay=0.0;
        for (int i = 0; i < inputs.size(); i++) {
            String[] itemStrings=inputs.get(i).split("x");
            allItems.put(itemStrings[0].trim(), Integer.valueOf(itemStrings[1].trim()));
            if(salesPromotionRepository.findAll().get(1).getRelatedItems().contains(itemStrings[0].trim())) {
                discountItems.put(itemStrings[0].trim(), Integer.valueOf(itemStrings[1].trim()));
                disList.add(itemStrings[0].trim());
            }else {
                commonItems.put(itemStrings[0].trim(), Integer.valueOf(itemStrings[1].trim()));
            }
        }  
        
        double noHalfOff = noDiscount(allItems);
        if(noHalfOff>=30) {
            noHalfOff-=6;
        }
        double HalfOff = noDiscount(commonItems)+HARF_DISCOUNT_ON_SPECIFIED_ITEMS(discountItems);
        
        if(noHalfOff<=HalfOff) {
            totalPay=noHalfOff;
        }else {
            totalPay=HalfOff;
        }
        
        if(noDiscount(allItems)>=30||HARF_DISCOUNT_ON_SPECIFIED_ITEMS(discountItems)!=0) {
            if(noHalfOff<=HalfOff) {
                //使用满30减6元
                discountInfoString.append("使用优惠:\n").append("满30减6元，省6元\n");
            }else {
                //使用半折优惠
                discountInfoString.append("使用优惠:\n").append("指定菜品半价(");
                for (String string : disList) {
                    for (int i = 0; i < itemRepository.findAll().size(); i++) {
                        if(string.equals(itemRepository.findAll().get(i).getId())) {
                            discountInfoString.append(itemRepository.findAll().get(i).getName()).append("，");
                            break;
                        }
                    }
                }
                discountInfoString.deleteCharAt(discountInfoString.length()-1).append(")，省")
                .append(rvZeroAndDot(String.valueOf(HARF_DISCOUNT_ON_SPECIFIED_ITEMS(discountItems)))).append("元\n");
            }
        }else {
            discountInfoString.delete(0, discountInfoString.length());
        }
               
        for (int i = 0; i < inputs.size(); i++) {
            String[] itemStrings=inputs.get(i).split("x");
            double singlePay=0.0;
            String nameString ="";
            Map<String, Integer> singleIteMap=new HashMap<String, Integer>();
            singleIteMap.put(itemStrings[0].trim(), Integer.valueOf(itemStrings[1].trim()));
            singlePay=noDiscount(singleIteMap);
            for (int z = 0; z < itemRepository.findAll().size(); z++) {
                if(itemStrings[0].trim().equals(itemRepository.findAll().get(z).getId())) {
                    nameString = itemRepository.findAll().get(z).getName();
                    break;
                }
            }           
            detailedInfoString.append(nameString).append(" x ")
            .append(itemStrings[1].trim()).append(" = ").append(rvZeroAndDot(String.valueOf(singlePay))).append("元\n"); 
        }

        totalInfoString.append("总计：").append(rvZeroAndDot(String.valueOf(totalPay)))
        .append("元\n").append("===================================");
        
        //System.out.println(detailedInfoString.append(discountInfoString).append(totalInfoString).toString());
        return detailedInfoString.append(discountInfoString).append(totalInfoString).toString();
    }
    
}
